import copy
class my_tuple:
    def __init__(self, row=0, col=0):
        self.n1 = row
        self.n2 = col
        
    def __str__(self):
        return "(" +str(self.n1) +"," +str(self.n2) +")"

    def __repr__(self):
        return "(" +str(self.n1) +"," +str(self.n2) +")"

def getPrettyString(matrix):
    s = [[str(e) for e in row] for row in matrix]
    lens = [max(map(len, col)) for col in zip(*s)]
    fmt = '\t'.join('{{:{}}}'.format(x) for x in lens)
    table = [fmt.format(*row) for row in s]
    return '\n'.join(table)

class GCS:
        
    def __init__(self, arr1, arr2):
        self.arr1 = arr1
        self.arr2 = arr2
        self.lookup_nil = -1
        self.lookup = [[self.lookup_nil for x in xrange(len(self.arr2))] for x in xrange(len(self.arr1))]
        self.next_hop = [[my_tuple(0,0) for x in xrange(len(self.arr2))] for x in xrange(len(self.arr1))]
        
    def __repr__(self):
        result = "Inputs\n"
        result+= str(self.arr1) +"\n"
        result+= str(self.arr2) +"\n"
         
        result+="Lookups\n"
        result+= getPrettyString(self.lookup) +"\n"
        result+= "Next Hops\n"
        result+= getPrettyString(self.next_hop)
        return result
    
    def __str__(self):
        result = "Inputs\n"
        result+= str(self.arr1) +"\n"
        result+= str(self.arr2) +"\n"
         
        result+="Lookups\n"
        result+= getPrettyString(self.lookup) +"\n"
        result+= "Next Hops\n"
        result+= getPrettyString(self.next_hop)
        return result
        
    def Longest(self, index1, index2):
        result = 0
        if(index1<=-1 or index2<=-1):
            return 0
        elif(self.lookup[index1][index2] != self.lookup_nil):
            return self.lookup[index1][index2]
        elif(self.arr1[index1]== self.arr2[index2]):
            result = 1+ self.Longest(index1-1, index2-1)
            self.next_hop[index1][index2] = my_tuple(index1-1, index2-1)
        else:
            temp1 = self.Longest(index1-1, index2)
            temp2 = self.Longest(index1, index2-1)
            
            if(temp1>temp2):
                result = temp1
                self.next_hop[index1][index2] = my_tuple(index1-1, index2)
            else:
                result = temp2
                self.next_hop[index1][index2] = my_tuple(index1, index2-1)
        self.lookup[index1][index2] = result
        return result
    
    def GetGCS(self):
        row = len(self.arr1)-1
        column = len(self.arr2)-1
        #print "longest subsequence size: " +str()
        self.Longest(row, column)
        result = []
        
        while (row>=0 and column>=0):
            next_tuple = self.next_hop[row][column]
            if(next_tuple.n1+1==row and next_tuple.n2+1==column):
                result.insert(0,self.arr1[row])
            row = next_tuple.n1
            column = next_tuple.n2
        #if(n1==-1 and column==-1):
        #    result.insert(0, self.arr1[0])
            
        return result
        
    def getNumSolutions(self):
        maxLength = self.Longest(len(self.arr1)-1, len(self.arr2)-1)
        numSolutions = 0 if maxLength==0 else 1
        solution = self.GetGCS()
        
        local_arr1 = copy.deepcopy(self.arr1)
        local_arr2 = copy.deepcopy(self.arr2)
        
        while(len(solution)>0):
            topmost_solution = solution.pop()
            while(topmost_solution in local_arr1):
                local_arr1.remove(topmost_solution)
                tempGCS = GCS(local_arr1, self.arr2)
                if(tempGCS.Longest(len(local_arr1)-1, len(self.arr2)-1) == maxLength):
                    numSolutions+=1#tempGCS.getNumSolutions()
        
        solution = self.GetGCS()
        while(len(solution)>0):
            topmost_solution = solution.pop()
            while(topmost_solution in local_arr2):
                local_arr2.remove(topmost_solution)
                tempGCS = GCS(self.arr1, local_arr2)
                if(tempGCS.Longest(len(self.arr1)-1, len(local_arr2)-1)==maxLength):
                    numSolutions+=1#tempGCS.getNumSolutions()
        
        return numSolutions

    def getNumSolutions_recursive(self, minLength):
        solution = self.GetGCS()
        
        if(len(solution)<minLength):
            return 0;
        
        numSolutions = self.getNumSolutions()
        local_arr1 = copy.deepcopy(self.arr1)
        local_arr2 = copy.deepcopy(self.arr2)
        
        while(len(local_arr1)>0):
            local_arr1.pop()
            tempGCS = GCS(local_arr1, self.arr2)
            if(tempGCS.Longest(len(local_arr1)-1, len(self.arr2)-1) == minLength):
                numSolutions+=tempGCS.getNumSolutions_recursive(minLength)
        
        while(len(local_arr2)>0):
            local_arr2.pop()
            tempGCS = GCS(self.arr1, local_arr2)
            if(tempGCS.Longest(len(self.arr1)-1, len(local_arr2)-1)==minLength):
                numSolutions+=tempGCS.getNumSolutions_recursive(minLength)
        
        return numSolutions
        

str1 = list("1234")#thisisatest")#ab")#
str2 = list("1224533324")#testing123testing")#aaaabbb")#
print "Initial Strings"
print str1
print str2
sample = GCS(str1, str2)
#print sample.Longest(len(str1)-1, len(str2)-1)
print "Solution"
print sample.GetGCS()
#print "Number of solutions: " +str(sample.getNumSolutions_recursive(len(sample.GetGCS())))
print sample
